//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/InputActionMap/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Righthand"",
            ""id"": ""0f871fcf-0e7a-4f48-be07-026fe64b9a8d"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""775af0f5-e4cb-4158-b6f3-ef80411d12bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a8f06d7-7655-4ab2-bec3-58288f3b05bf"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lefthand"",
            ""id"": ""064d96c3-8944-439f-b5b2-fd4698a92776"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6ca9b82c-9b4e-4d04-8e74-7f9af2451a30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""caa57451-a483-4e61-840d-5c5ac2cac94e"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Righthand
        m_Righthand = asset.FindActionMap("Righthand", throwIfNotFound: true);
        m_Righthand_Shoot = m_Righthand.FindAction("Shoot", throwIfNotFound: true);
        // Lefthand
        m_Lefthand = asset.FindActionMap("Lefthand", throwIfNotFound: true);
        m_Lefthand_Shoot = m_Lefthand.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Righthand
    private readonly InputActionMap m_Righthand;
    private List<IRighthandActions> m_RighthandActionsCallbackInterfaces = new List<IRighthandActions>();
    private readonly InputAction m_Righthand_Shoot;
    public struct RighthandActions
    {
        private @PlayerInputActions m_Wrapper;
        public RighthandActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Righthand_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Righthand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RighthandActions set) { return set.Get(); }
        public void AddCallbacks(IRighthandActions instance)
        {
            if (instance == null || m_Wrapper.m_RighthandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RighthandActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IRighthandActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IRighthandActions instance)
        {
            if (m_Wrapper.m_RighthandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRighthandActions instance)
        {
            foreach (var item in m_Wrapper.m_RighthandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RighthandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RighthandActions @Righthand => new RighthandActions(this);

    // Lefthand
    private readonly InputActionMap m_Lefthand;
    private List<ILefthandActions> m_LefthandActionsCallbackInterfaces = new List<ILefthandActions>();
    private readonly InputAction m_Lefthand_Shoot;
    public struct LefthandActions
    {
        private @PlayerInputActions m_Wrapper;
        public LefthandActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Lefthand_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Lefthand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LefthandActions set) { return set.Get(); }
        public void AddCallbacks(ILefthandActions instance)
        {
            if (instance == null || m_Wrapper.m_LefthandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LefthandActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(ILefthandActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(ILefthandActions instance)
        {
            if (m_Wrapper.m_LefthandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILefthandActions instance)
        {
            foreach (var item in m_Wrapper.m_LefthandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LefthandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LefthandActions @Lefthand => new LefthandActions(this);
    public interface IRighthandActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface ILefthandActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
}
